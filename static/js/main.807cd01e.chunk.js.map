{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","memo","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","useState","Math","random","toString","slice","id","touched","setToched","hasError","htmlFor","classNames","type","placeholder","event","target","onBlur","NewMovie","onAdd","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","newFilm","shouldShowError","handleFormSubmit","useCallback","preventDefault","prevCount","onSubmit","disabled","App","moviesFromServer","filmList","setFilmList","addMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.807cd01e.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = memo(({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n));\n","import React, { memo } from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = memo(({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n));\n","import classNames from 'classnames';\nimport React, { memo, useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nconst getRandomDigits = () => {\n  Math.random().toString().slice(2);\n};\n\nexport const TextField: React.FC<Props> = memo(\n  ({\n    name,\n    value,\n    label = name,\n    required = false,\n    onChange = () => {},\n  }) => {\n    const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n    const [touched, setToched] = useState(false);\n    const hasError = touched && required && !value;\n\n    return (\n      <div className=\"field\">\n        <label className=\"label\" htmlFor={id}>\n          {label}\n        </label>\n\n        <div className=\"control\">\n          <input\n            id={id}\n            data-cy={`movie-${name}`}\n            className={classNames('input', {\n              'is-danger': hasError,\n            })}\n            type=\"text\"\n            placeholder={`Enter ${label}`}\n            value={value}\n            onChange={event => onChange(event.target.value)}\n            onBlur={() => setToched(true)}\n          />\n        </div>\n\n        {hasError && (\n          <p className=\"help is-danger\">{`${label} is required`}</p>\n        )}\n      </div>\n    );\n  },\n);\n","import {\n  FC,\n  FormEvent,\n  memo,\n  useCallback,\n  useState,\n} from 'react';\nimport { Movie } from '../../types/Movie';\nimport { TextField } from '../TextField';\n\ntype NewMovieProps = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const NewMovie: FC<NewMovieProps> = memo(({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  const newFilm = {\n    title,\n    description,\n    imgUrl,\n    imdbUrl,\n    imdbId,\n  };\n\n  const shouldShowError = !title || !imgUrl || !imdbUrl || !imdbId;\n\n  const handleFormSubmit = useCallback(\n    (event: FormEvent) => {\n      event.preventDefault();\n\n      setCount((prevCount) => prevCount + 1);\n\n      onAdd(newFilm);\n\n      setTitle('');\n      setDescription('');\n      setImgUrl('');\n      setImdbUrl('');\n      setImdbId('');\n    },\n    [newFilm, count],\n  );\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleFormSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={(value) => setTitle(value)}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={(value) => setDescription(value)}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={(value) => setImgUrl(value)}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={(value) => setImdbUrl(value)}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={(value) => setImdbId(value)}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={shouldShowError}\n          >\n            Add Movie\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n});\n","import { useCallback, useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport './App.scss';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [filmList, setFilmList] = useState(moviesFromServer);\n\n  const addMovie = useCallback(\n    (movie: Movie) => {\n      setFilmList([...filmList, movie]);\n    },\n    [filmList],\n  );\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={filmList} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}